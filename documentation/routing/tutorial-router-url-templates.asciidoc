---
title: URL Templates
order: 5
layout: page
---

= URL Templates

URL templates define the mean of including parameters into a route url.
URL template parameters are defined as URL segments within `@Route`, `@RouteAlias` and `@RoutePrefix` annotation values, using `:parameter_name[modifier][(matching_regex)]` syntax, where:

* `parameter_name` is the name of the parameter used to retrive the value of the parameter when a url matching the template is resolved on the server.
* `modifier` is optional and may be one of the following:
** `?` defines an optional parameter which might be missing from the url being resolved,
** `*` defines a wildcard parameter which can be used only as the last segment in the template, resolving all segment values at the end of the url.
* `matching_regex` is also optional and defines the regex used to match the parameter value in the url.
If it's missing, the parameter template accepts any value.

Parameter values may be retrieve from a `BeforeEvent` instance on any `Component` in the navigation chain, either parent layout or navigation target.

== Defining URL Templates using `@Route`, `@RouteAlias` and `@RoutePrefix`

The final URL template is the result of the value composition from the `@Route`, `@RouteAlias` and `@RoutePrefix` annotations as explain in <<tutorial-router-layout#,Router Layouts and Nested Router Targets>>.
Any URL segment defined by these annotations may represent a URL parameter.

[source,java]
----
    @Route(value = "threadID/:threadID", layout = ForumView.class)
    public class ForumThread extends Div implements BeforeEnterObserver {

    }
----

[source,java]
----
    @Route(value = "")
    @RouteAlias(value = "forum/:categoryID", absolute = true)
    @RoutePrefix("forum/category/:categoryID")
    public class ForumView extends Div implements RouterLayout,
            BeforeEnterObserver {

    }

    @Route(value = "threadID/:threadID", layout = ForumView.class)
    @RouteAlias(value = "threadID/:threadID/comment", layout = ForumView.class)
    @RouteAlias(value = "forum/:threadID", layout = ForumView.class, absolute = true)
    public class ForumThread extends Div implements BeforeEnterObserver {

    }
----

* On startup, the navigation target is automatically configured for every `greet/<anything>` path, except where a separate navigation target with the exact `@Route` is configured to match `greet/<some specific path>`.

[NOTE]
An exact navigation target always takes precedence when resolving the URL.

== Optional URL parameters

URL parameters can be annotated as optional using `@OptionalParameter`.

*Example*: Defining the route to match both `greet` and `greet/<anything>`:

[source,java]
----
@Route("greet")
public class OptionalGreeting extends Div
        implements HasUrlParameter<String> {

    @Override
    public void setParameter(BeforeEvent event,
            @OptionalParameter String parameter) {
        if (parameter == null) {
            setText("Welcome anonymous.");
        } else {
            setText(String.format("Welcome %s.",
                  parameter));
        }
    }
}
----

[NOTE]
A more specific route always takes precedence over a parameterised route.

== Wildcard URL parameters

Where more parameters are needed, the URL parameter can also be annotated with `@WildcardParameter`.

*Example*: Defining the route to match `greet` and anything after it, for instance `greet/one/five/three`:

[source,java]
----
@Route("greet")
public class WildcardGreeting extends Div
        implements HasUrlParameter<String> {

    @Override
    public void setParameter(BeforeEvent event,
            @WildcardParameter String parameter) {
        if (parameter.isEmpty()) {
            setText("Welcome anonymous.");
        } else {
            setText(String.format(
                  "Handling parameter %s.",
                  parameter));
        }
    }
}
----

[NOTE]
The wildcard parameter will never be `null`.

[NOTE]
More specific routes always take precedence over wildcard routes.

== Query parameters

It is possible to get any query parameters contained in a URL, for example `?name1=value1&name2=value2`.

Use the `getQueryParameters()` method of the `Location` class to access query parameters.
You can obtain the `Location` class through the `BeforeEvent` parameter of the `setParameter` method.

[NOTE]
A `Location` object represents a relative URL made up of path segments and query parameters, but without the hostname, e.g. `new Location("foo/bar/baz?name1=value1")`.

[source,java]
----
@Override
public void setParameter(BeforeEvent event,
        @OptionalParameter String parameter) {

    Location location = event.getLocation();
    QueryParameters queryParameters = location
            .getQueryParameters();

    Map<String, List<String>> parametersMap =
            queryParameters.getParameters();
}
----

[NOTE]
`getQueryParameters()` supports multiple values associated with the same key, for example `https://example.com/?one=1&two=2&one=3` will result in the corresponding map `{"one" : [1, 3], "two": [2]}}`.
